---
# Pre-commit configuration for Home Assistant Test Framework
# Optimized for AI code generation quality enforcement

# See https://pre-commit.com for more information
default_language_version:
  python: python3.11

repos:
  # ========== PHASE 1: CRITICAL SECURITY & TEST INTEGRITY ==========

  # Security: Prevent secrets/credentials in commits
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: '^(tests/fixtures/|\.secrets\.baseline)$'

  # Security: Additional secret scanning
  - repo: https://github.com/zricethezav/gitleaks
    rev: v8.18.1
    hooks:
      - id: gitleaks

  # Test Integrity: Validate pytest collection
  - repo: local
    hooks:
      - id: pytest-collect
        name: Validate pytest collection
        entry: .venv/bin/pytest
        args: ['--collect-only', '--quiet', '--ignore=tests/ui/docker/scripts/']
        language: system
        types: [python]
        pass_filenames: false
        files: '^tests/.*\.py$'

  # Type Safety: Strict mypy for HA compatibility
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: ['--strict', '--ignore-missing-imports']
        additional_dependencies:
          - types-PyYAML
          - types-requests
          - pytest
        files: '^(tests/helpers/|tests/unit/|tests/integration/).*\.py$'

  # ========== PHASE 2: CODE QUALITY & STRUCTURE ==========

  # Python formatting (already in use)
  - repo: https://github.com/psf/black
    rev: 24.1.0
    hooks:
      - id: black
        args: ['--line-length=100']

  # Import sorting (already in use)
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ['--profile=black', '--line-length=100']

  # Linting (already in use)
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=100', '--extend-ignore=E203,W503,D100,D103,D104,ASYNC124,ASYNC109,ASYNC300']
        additional_dependencies:
          - flake8-docstrings
          - flake8-pytest-style
          - flake8-async

  # Security: Python-specific vulnerabilities
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        args: ['-ll', '-s', 'B101']
        files: '^tests/.*\.py$'

  # ========== PHASE 3: HA-SPECIFIC & TEST ARCHITECTURE ==========

  # YAML validation for HA configs
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        files: '\.(yaml|yml)$'
        args: ['-d', '{extends: default, rules: {line-length: {max: 120}, truthy: disable}}']

  # Custom: Test structure validator
  - repo: local
    hooks:
      - id: test-structure-validator
        name: Validate test structure (logic/mock/integration)
        entry: python scripts/validate_test_structure.py
        language: system
        types: [python]
        files: '^tests/.*\.py$'

  # Custom: Automation logic enforcer
  - repo: local
    hooks:
      - id: automation-logic-enforcer
        name: Ensure business logic in automation_logic.py
        entry: python scripts/check_automation_logic.py
        language: system
        types: [python]
        files: '^tests/.*\.py$'

  # Custom: HA mock validator
  - repo: local
    hooks:
      - id: ha-mock-validator
        name: Validate HA mock consistency
        entry: python scripts/validate_ha_mocks.py
        language: system
        types: [python]
        files: '^tests/(helpers/ha_mocks|unit/mock)/.*\.py$'

  # ========== PHASE 4: PERFORMANCE & QUALITY ==========

  # Dead code detection
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.10
    hooks:
      - id: vulture
        args: ['tests/', '--min-confidence=80']

  # Docstring enforcement
  - repo: https://github.com/PyCQA/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        files: '^tests/helpers/.*\.py$'
        args: ['--convention=google']

  # Modern Python syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: ['--py311-plus']

  # ========== GENERAL REPOSITORY HEALTH ==========

  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: pretty-format-json
        args: ['--autofix', '--indent=2']

  # Markdown formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.17
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black

  # Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

# Configuration for specific tools
fail_fast: false
minimum_pre_commit_version: '3.0.0'
