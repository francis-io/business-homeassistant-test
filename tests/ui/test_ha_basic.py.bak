"""Basic Home Assistant UI tests that work with default setup."""

import pytest
from playwright.sync_api import Page, expect


class TestHomeAssistantBasicUI:
    """Test basic Home Assistant UI functionality."""
    
    @pytest.mark.ui
    def test_home_assistant_loads(self, page: Page, ha_url: str):
        """Test that Home Assistant UI loads successfully."""
        # Navigate to Home Assistant
        page.goto(ha_url)
        
        # Wait for the main app to load
        page.wait_for_selector("home-assistant", state="visible", timeout=10000)
        
        # Verify the page loaded
        assert page.title(), "Page should have a title"
        
        # Take a screenshot for debugging
        page.screenshot(path="reports/ha_loaded.png")
    
    @pytest.mark.ui
    def test_sidebar_exists(self, page: Page, ha_url: str):
        """Test that the sidebar menu exists."""
        # Navigate to Home Assistant
        page.goto(ha_url)
        
        # Wait for the app to load
        page.wait_for_selector("home-assistant", state="visible")
        
        # Check if sidebar exists
        sidebar = page.locator("ha-sidebar")
        if sidebar.count() > 0:
            expect(sidebar).to_be_visible()
            
            # Look for menu items
            menu_items = page.locator("paper-listbox")
            if menu_items.count() > 0:
                expect(menu_items.first).to_be_visible()
    
    @pytest.mark.ui
    def test_configuration_menu(self, page: Page, ha_url: str):
        """Test accessing the configuration menu."""
        # Navigate to Home Assistant
        page.goto(ha_url)
        
        # Wait for the app to load
        page.wait_for_selector("home-assistant", state="visible")
        
        # Look for configuration link - might be in sidebar
        config_links = page.locator("a[href*='/config']")
        if config_links.count() > 0:
            # Click the first configuration link
            config_links.first.click()
            
            # Wait for navigation
            page.wait_for_timeout(2000)
            
            # Verify we navigated somewhere
            assert "/config" in page.url or "configuration" in page.url.lower()
    
    @pytest.mark.ui
    def test_header_exists(self, page: Page, ha_url: str):
        """Test that the header/app toolbar exists."""
        # Navigate to Home Assistant
        page.goto(ha_url)
        
        # Wait for the app to load
        page.wait_for_selector("home-assistant", state="visible")
        
        # Look for header elements
        header = page.locator("app-header, ha-app-header, app-toolbar")
        if header.count() > 0:
            expect(header.first).to_be_visible()
    
    @pytest.mark.ui
    def test_parallel_browser_isolation(self, page: Page, ha_url: str):
        """Test that browser contexts are isolated in parallel execution."""
        # Navigate to Home Assistant
        page.goto(ha_url)
        
        # Set a unique value in sessionStorage
        test_id = "test_parallel_isolation"
        page.evaluate(f"sessionStorage.setItem('test_id', '{test_id}')")
        
        # Verify we can read it back
        stored_value = page.evaluate("sessionStorage.getItem('test_id')")
        assert stored_value == test_id
        
        # Verify localStorage is also isolated
        page.evaluate(f"localStorage.setItem('test_local', '{test_id}')")
        local_value = page.evaluate("localStorage.getItem('test_local')")
        assert local_value == test_id