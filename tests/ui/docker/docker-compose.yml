---
services:
  home-assistant-test-config-validator:
    container_name: "${NAME_PREFIX}-config-validator"
    image: "${HA_IMAGE}"
    volumes:
      - ./config:/config:ro
    command: ["python", "-m", "homeassistant", "--config", "/config", "--script", "check_config"]
    restart: "no"

  home-assistant-test-server:
    container_name: "${NAME_PREFIX}-server"
    image: "${HA_IMAGE}"
    volumes:
      - ./config:/config-source:ro
    ports:
      - "${HA_PORT}:${HA_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${HA_PORT}"]
      interval: 1s
      timeout: 5s
      retries: 30
      start_period: 1s
    command: >
      sh -c "cp -r /config-source/* /config/ 2>/dev/null || true &&
             python -m homeassistant"
    restart: "no"

  home-assistant-test-onboarding:  # Run onboarding and wait until complete
    container_name: "${NAME_PREFIX}-onboarding"
    image: "${HA_IMAGE}"
    depends_on:
      home-assistant-test-server:
        condition: service_healthy
      home-assistant-test-config-validator:
        condition: service_completed_successfully
    volumes:
      - ./scripts:/scripts:ro
    environment:
      - HA_URL=http://${SERVER_CONTAINER}:${HA_PORT}
    command: ["python", "/scripts/onboarding_and_test.py"]
    restart: "no"

  home-assistant-test-runner-ui:
    container_name: "${NAME_PREFIX}-runner-ui"
    build:
      context: ../../..
      dockerfile: tests/ui/docker/Dockerfile
    depends_on:
      home-assistant-test-onboarding:
        condition: service_completed_successfully
    volumes:
      - ../../..:/workspace:ro
      - ../../../reports:/reports
      - /tmp/.X11-unix:/tmp/.X11-unix:rw  # For headed mode
    working_dir: /workspace
    environment:
      - HA_URL=http://${SERVER_CONTAINER}:${HA_PORT}
      - DISPLAY=${DISPLAY:-}  # For headed mode
      - HEADED=${HEADED:-false}
      - DEBUG=${DEBUG:-false}
      - SLOWMO=${SLOWMO:-0}
    command: >
      sh -c "TIMESTAMP=$$(date '+%Y-%m-%d_%H-%M-%S') &&
             RUN_DIR=\"$${TIMESTAMP}_ui\" &&
             mkdir -p /reports/$${RUN_DIR} &&
             echo \"Running UI tests at $${TIMESTAMP}...\" &&
             PYTEST_ARGS=\"-v --tb=long --junit-xml=/reports/$${RUN_DIR}/results.xml\" &&
             if [ \"$${HEADED}\" = \"true\" ]; then PYTEST_ARGS=\"$${PYTEST_ARGS} --headed\"; fi &&
             if [ \"$${DEBUG}\" = \"true\" ]; then
               PYTEST_ARGS=\"$${PYTEST_ARGS} --slowmo=$${SLOWMO} -n 0\";
             else
               PYTEST_ARGS=\"$${PYTEST_ARGS} -n 2\";
             fi &&
             export PYTEST_SCREENSHOT_DIR=/reports/$${RUN_DIR} &&
             python -m pytest tests/ui --ignore=tests/ui/docker $${PYTEST_ARGS} &&
             echo \"RUN_DIR=$${RUN_DIR}\" > /reports/last_report.txt || true"
    restart: "no"
