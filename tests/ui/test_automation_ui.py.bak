"""UI tests for Home Assistant automation interface using pytest-playwright."""

import pytest
from playwright.sync_api import Page, expect


class TestAutomationUI:
    """Test automation UI functionality."""
    
    @pytest.mark.ui
    def test_view_automations_list(self, page: Page, ha_url: str):
        """Test viewing the automations list."""
        # Navigate to automations page
        page.goto(ha_url)
        page.click("a[href='/config/automation']")
        
        # Wait for automation picker to be visible
        page.wait_for_selector("ha-automation-picker", state="visible", timeout=10000)
        
        # Check for common UI elements
        expect(page.locator("mwc-fab[title='Add Automation']")).to_be_visible()
        
        # Check if any automations are listed
        automation_items = page.locator("ha-card")
        count = automation_items.count()
        assert count >= 0, "Should be able to count automations"
    
    @pytest.mark.ui
    def test_search_automations(self, page: Page, ha_url: str):
        """Test searching for automations."""
        # Navigate to automations page
        page.goto(ha_url)
        page.click("a[href='/config/automation']")
        page.wait_for_selector("ha-automation-picker", state="visible")
        
        # Find search input
        search_input = page.locator("search-input")
        search_input.wait_for(state="visible")
        
        # Type search query
        search_input.type("light")
        
        # Wait for results to filter
        page.wait_for_timeout(500)  # Small delay for filtering
        
        # Verify search is working (basic check)
        expect(page.locator("ha-automation-picker")).to_be_visible()
    
    @pytest.mark.ui
    def test_automation_toggle(self, page: Page, ha_url: str):
        """Test toggling an automation on/off."""
        # Navigate to automations page
        page.goto(ha_url)
        page.click("a[href='/config/automation']")
        page.wait_for_selector("ha-automation-picker", state="visible")
        
        # Wait for any automation card to appear
        automation_cards = page.locator("ha-card")
        
        # Check if there are any automations
        if automation_cards.count() > 0:
            # Find the toggle switch in first card
            first_card = automation_cards.first
            toggle = first_card.locator("ha-entity-toggle")
            
            if toggle.count() > 0:
                # Get initial state
                initial_checked = toggle.is_checked()
                
                # Click to toggle
                toggle.click()
                
                # Wait for state change
                page.wait_for_timeout(1000)
                
                # Verify state changed
                new_checked = toggle.is_checked()
                assert new_checked != initial_checked, "Toggle state should change"
    
    @pytest.mark.ui
    def test_create_automation_button(self, page: Page, ha_url: str):
        """Test the create automation button."""
        # Navigate to automations page
        page.goto(ha_url)
        page.click("a[href='/config/automation']")
        page.wait_for_selector("ha-automation-picker", state="visible")
        
        # Find and click the add button
        add_button = page.locator("mwc-fab[title='Add Automation']")
        add_button.click()
        
        # Should navigate to automation editor
        page.wait_for_url("**/config/automation/new**")
        
        # Verify we're in the editor
        expect(page.locator("ha-automation-editor")).to_be_visible()


class TestAutomationEditor:
    """Test automation editor functionality."""
    
    @pytest.mark.ui
    def test_automation_editor_sections(self, page: Page, ha_url: str):
        """Test that automation editor has all required sections."""
        # Navigate directly to new automation
        page.goto(f"{ha_url}/config/automation/new")
        
        # Wait for editor to load
        page.wait_for_selector("ha-automation-editor", state="visible")
        
        # Check for main sections - HA may use different headers
        triggers_section = page.locator("ha-card").filter(has_text="Trigger")
        conditions_section = page.locator("ha-card").filter(has_text="Condition") 
        actions_section = page.locator("ha-card").filter(has_text="Action")
        
        expect(triggers_section.first).to_be_visible()
        expect(conditions_section.first).to_be_visible()
        expect(actions_section.first).to_be_visible()
    
    @pytest.mark.ui
    def test_add_trigger(self, page: Page, ha_url: str):
        """Test adding a trigger to an automation."""
        # Navigate to new automation
        page.goto(f"{ha_url}/config/automation/new")
        page.wait_for_selector("ha-automation-editor", state="visible")
        
        # Find triggers section
        triggers_section = page.locator("ha-card").filter(has_text="Trigger").first
        
        # Click add trigger button
        add_trigger = triggers_section.locator("mwc-button").filter(has_text="Add")
        if add_trigger.count() > 0:
            add_trigger.first.click()
            
            # Trigger row should appear
            trigger_row = page.locator("ha-automation-trigger-row")
            expect(trigger_row.first).to_be_visible()


class TestDashboardAutomations:
    """Test automation interactions from the dashboard."""
    
    @pytest.mark.ui
    def test_automation_entity_on_dashboard(self, page: Page, ha_url: str):
        """Test interacting with automation entities on the dashboard."""
        # Navigate to dashboard
        page.goto(ha_url)
        
        # Wait for dashboard to load
        page.wait_for_selector("home-assistant", state="visible")
        
        # Navigate to default dashboard if not already there
        if page.locator("a[href='/lovelace/0']").count() > 0:
            page.click("a[href='/lovelace/0']")
            page.wait_for_selector("hui-view", state="visible", timeout=5000)
        
        # Look for any automation entities on the dashboard
        automation_entities = page.locator("hui-entity-card")
        
        if automation_entities.count() > 0:
            # Click on first automation entity
            first_automation = automation_entities.first
            first_automation.click()
            
            # More info dialog should appear
            more_info = page.locator("ha-more-info-dialog")
            expect(more_info).to_be_visible()
            
            # Close dialog
            close_button = page.locator("mwc-icon-button[aria-label='Close dialog']")
            if close_button.count() > 0:
                close_button.click()
                
                # Dialog should disappear
                expect(more_info).not_to_be_visible()


# Parallel execution test
class TestParallelUIExecution:
    """Test that verifies parallel UI test execution works correctly."""
    
    @pytest.mark.ui
    def test_parallel_isolation_1(self, page: Page, ha_url: str):
        """First parallel test - verifies isolation."""
        page.goto(ha_url)
        
        # Set a value in localStorage specific to this test
        worker_id = "test1"
        page.evaluate(f"localStorage.setItem('test_1_worker', '{worker_id}')")
        
        # Verify we can read it back
        stored_value = page.evaluate("localStorage.getItem('test_1_worker')")
        assert stored_value == worker_id
        
        # Verify we don't see values from other tests
        other_value = page.evaluate("localStorage.getItem('test_2_worker')")
        assert other_value is None
    
    @pytest.mark.ui
    def test_parallel_isolation_2(self, page: Page, ha_url: str):
        """Second parallel test - verifies isolation."""
        page.goto(ha_url)
        
        # Set a different value in localStorage
        worker_id = "test2"
        page.evaluate(f"localStorage.setItem('test_2_worker', '{worker_id}')")
        
        # Verify we can read it back
        stored_value = page.evaluate("localStorage.getItem('test_2_worker')")
        assert stored_value == worker_id
        
        # Verify we don't see values from other tests
        other_value = page.evaluate("localStorage.getItem('test_1_worker')")
        assert other_value is None